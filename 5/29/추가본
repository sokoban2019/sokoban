#include<stdio.h>
#include<termio.h>
#include<stdlib.h>

void loadmap();//*
void prtMap();//*
void command();//*
int map();//*
int checkclear();//*
void save();
void up();
void down();
void right();
void left();
void new();//*
void undo();
void replay();
void file();//세이브파일로드
void display();//명령어 설명*
void top();//순위 보여주기

int stage,move;
char map[5][30][30];


int getch(void){
    int ch;
    struct termios buf, save;
    tcgetattr(0,&save);
    buf = save;
    buf.c_lflag &= ~(ICANON|ECHO);
    buf.c_cc[VMIN] = 1;
    buf.c_cc[VTIME] = 0;
    tcsetattr(0, TCSAFLUSH, &buf);
    ch = getchar();
    tcsetattr(0, TCSAFLUSH, &save);
    return ch;
}


int main()
{

   char USER[100][11];
   int userturn=0;   
   int mapcheck;

   loadmap();
   mapcheck=map();//맵 출력 + 보물 갯수 확인해서 맞으면 return 1 틀리면 return 0
        if(mapcheck)
         {
                 printf("오류");
                  return 0;
          }

   printf("Start../nInput name :");
   scanf("%s",USER[userturn]);//userturn 마지막에 증가시키는거 잊지말
   printf("\nHello %s/n",USER[userturn]);
   
   
   command();// 명령 받기 창고지기 조정,u,r,n,e,s,f,d,t
   

   
}


   
}

void command()
{
   char usr;

   while(1)
{

   mapprint();
   usr=getch()//자동 반환
   
   switch(usr)
{
   case 'h':left();
         
   case 'j':down();

   case 'k':up();

   case 'l':right();

   case 'e':
      save();
      printf("SEE YOU...%s",USER[userturn]);
      exit();

   case 's':save();

   case 'n':new();

   case 'u':undo();

   case 'r':replay();

   case 'f':file();

   case 'd':display();

   case 't':top();


}
   stage=stage+checkclear();// 보물을 모두 정리했는지 확인, 만약 다 정리했다면 return 1
   save();//현재 상태 저장

   if(stage==6)
{
   printf("GAME CLEAR!");
   exit();

}

} 


void display()
{
        printf("h(왼쪽), j(아래), k(위), l(오른쪽)\n");
        printf("u(undo)\n");
        printf("r(replay)\n");
        printf("n(new)\n");
        printf("e(exit)\n");
        printf("s(save)\n");
        printf("f(file load)\n");
        printf("d(display help)\n");
        printf("t(top)\n");

        
}

void loadMap(){   
   FILE *fp = fopen("map1.txt","r");
   
   int i = 0, j;
   int stage = 0;
   char ch;
    
   while(1)
   {
      ch = getc(fp);
      
      if(ch==EOF)
      {
         map[stage][i][j]='\0';
         break;
      }
      
      else if(ch>='1' && ch<='5')
      {
         map[stage][i][j]='\0';
         stage=ch-'0'-1, i = 0, j = 0;
         getc(fp);
      }
      
      else if(ch == '\n')
      {
         map[stage][i][j]='\n';
         i++, j = 0;
         continue;
      }
      else
      {
         map[stage][i][j] = ch;
         j++;
      }
   }
      
   fclose(fp);
   

}

void prtMap()
{
   int i=0, j=0;
   
   while(1)
   {
      char next=map[stage][i][j++];
      
      if(next=='\n') 
      {
         i++; j=0;
      }
      else if(next=='\0')
         break;
      
      printf("%c", next);
   }
   printf("\n");   
}

int map()
{
   int box_cnt[5],depository[5];
   
   for(int i=0;i<5;i++)
   {
      
      for(int j=0;j<30;j++)
      {   

      for(int k=0;k<30;k++)
      {   
   
         if(map[i][j][k]=='$')
            box_cnt[i]++;
         if(map[i][j][k]=='O'
            depository[i]++;

      }      
      }   
   
   }
   for(int k=0;k<5;k++)
   {
      if(box_cnt[k]!=depository[k])
         return 0;
         
   }



   return 1;   


}

int checkclear()
{
   
   
   switch(stage)
   {

   case 0:
      if(map[0][1][12]=='$'&& map[0][5][2]=='$'&& map[0][7][18]=='$'&& map[0][11][8]=='$')
      return 1;
   case 1:
      if(map[1][3][7]=='$'&& map[1][5][7]=='$'&& map[1][9][2]=='$'&& map[1][9][5]=='$')
                return 1;
   case 2:
      if(map[2][1][15]=='$'&& map[2][6][2]=='$'&& map[2][9][25]=='$'&& map[2][14][11]=='$')
                return 1;
   case 3:
      if(map[3][3][6]=='$'&& map[3][3][7]=='$'&& map[3][4][6]=='$'&& map[3][4][7]=='$'&& map[3][6][6]=='$'&& map[3][6][7]=='$' && map[3][7][6]=='$' && map[3][7][7]=='$')
                return 1;
   case 4:
       if(map[4][2][6]=='$'&& map[4][2][7]=='$'&& map[4][3][6]=='$'&& map[4][3][7]=='$')
                 return 1;




   }


   
}

void new()
{


   system("clear");
   stage=0;
   move=0;
   loadMap();
   prtMap();
   
}
